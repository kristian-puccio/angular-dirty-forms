{"version":3,"sources":["main.js","templates.tmpl.js"],"names":[],"mappingsxTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"angular-dirty-forms.js","sourcesContent":["(function() {\n\n\"use strict\";\n\n// Setup the angular app and load in any dependencies\nangular.module('angular-dirty-forms')\n    .factory('AlertFactory', AlertFactory)\n    .controller('AlertCtrl', AlertCtrl)\n    .directive('formGroup', formGroup)\n    .directive('controlGroup', controlGroup)\n    .directive('checkError', checkError)\n    .directive('checkCustomError', checkCustomError)\n    .directive('veryDirty', veryDirty)\n    .directive('number', numberValilidate)\n    .directive('notZero', notZero)\n;\n\n// TODO: add timeout to remove non danger...\nfunction AlertFactory($timeout) {\n    // types:  success, info, warning, or danger\n    var alerts = [];\n\n    return {\n        alerts: alerts,\n        removeAlert: function(index) {\n            alerts.splice(index, 1);\n        },\n        removeAlerts: function() {\n            alerts.splice(0, alerts.length);\n        },\n        addAlert: function(msg, type) {\n            alerts.push({type: type, msg: msg});\n            $timeout(function() {\n                $timeout(function() {\n                    scrollInto('alerts');\n                }, 0);\n            }, 0);\n        },\n        replaceAlerts: function(msg, type) {\n            alerts.splice(0, alerts.length);\n            this.addAlert(msg, type);\n        }\n    };\n};\n\nfunction AlertCtrl($scope, AlertFactory) {\n    $scope.alerts = AlertFactory.alerts;\n\n    $scope.closeAlert = function(index) {\n        AlertFactory.removeAlert(index);\n    };\n};\n\nfunction formGroup() {\n    return {\n        templateUrl: 'templates/form-group.html',\n        replace: true,\n        require: \"^form\",\n        transclude: true,\n        scope: {\n            label: \"@\", // Gets the string contents of the `label` attribute.\n            isVertical: \"@\"\n        },\n\n        link: function (scope, element, attrs, formController) {\n            var unbind;\n\n            // The <label> should have a `for` attribute that links it to the input.\n            // Get the `id` attribute from the input element\n            // and add it to the scope so our template can access it.\n            var id = element.find(\":input\").attr(\"id\");\n            scope.for = id;\n\n            // Get the `name` attribute of the input\n            var inputName = element.find(\":input\").attr(\"name\");\n            unbind = scope.$watch(function() {\n                return formController.veryDirty;\n            }, function(isDirty) {\n\n                if (!isDirty) {\n                    scope.isError = false;\n                    return\n                }\n\n                unbind();\n\n                scope.$watch(\n                    function() {\n                        return formController[inputName][\"$invalid\"]\n                    }, function(valid) {\n                        scope.isError = valid;\n                    }\n                );\n            });\n        }\n    };\n};\n\n// Extra stuff for bootstrap forms\nfunction controlGroup() {\n    return {\n        templateUrl: 'template/form/control-group.html',\n        replace: true,\n        require: \"^form\",\n        transclude: true,\n        scope: {\n            label: \"@\", // Gets the string contents of the `label` attribute.\n            isVertical: \"@\"\n        },\n\n        link: function (scope, element, attrs, formController) {\n            var unbind;\n\n            // The <label> should have a `for` attribute that links it to the input.\n            // Get the `id` attribute from the input element\n            // and add it to the scope so our template can access it.\n            var id = element.find(\":input\").attr(\"id\");\n            scope.for = id;\n\n            // Get the `name` attribute of the input\n            var inputName = element.find(\":input\").attr(\"name\");\n            unbind = scope.$watch(function() {\n                return formController.veryDirty;\n            }, function(isDirty) {\n\n                if (!isDirty) {\n                    scope.isError = false;\n                    return\n                }\n\n                unbind();\n\n                scope.$watch(\n                    function() {\n                        return formController[inputName][\"$invalid\"]\n                    }, function(valid) {\n                        scope.isError = valid;\n                    }\n                );\n            });\n        }\n    };\n};\n\nfunction checkError() {\n    return {\n        template: '<span ng-show=\"showError\" class=\"help-block\" ng-transclude></span>',\n        replace: true,\n        require: \"^form\",\n        transclude: true,\n        scope: {\n            msg: \"@\", // Gets the string contents of the `label` attribute.\n            field: \"@\"\n        },\n        link: function (scope, element, attrs, formController) {\n            var unbind;\n            scope.showError = false;\n\n\n            console.log(scope.field, \"<<< field\");\n            console.log(formController, '<<<< FC');\n            // Does the field exists in the form?\n            if (formController[scope.field]) {\n\n                unbind = scope.$watch(\n                    function() {\n                        return formController.veryDirty;\n                    }, function(isDirty) {\n                        if (isDirty) {\n\n                            unbind();\n\n                            scope.$watch(\n                                function() {\n                                    return formController[scope.field].$error[attrs[\"checkError\"]];\n                                }, function(showError) {\n                                    scope.showError = showError;\n                                }\n                            );\n                        }\n                    }\n                );\n            } else {\n                console.warn(\"Can't find field: \" + scope.field);\n            }\n        }\n    };\n};\n\nfunction checkCustomError() {\n    return {\n        // scope: {\n        //     // msg: \"@\", // Gets the string contents of the `label` attribute.\n        //     field: \"@\"\n        // },\n        template: '<div check-error=\"email\" field=\"{{field}}\">Custom Error!!!</div>',\n        // replace: true,\n        link: function (scope, element, attrs, formController) {\n            scope.field=\"email\";\n            // var unbind;\n            // scope.showError = false;\n\n            // // Does the field exists in the form?\n            // if (formController[scope.field]) {\n\n            //     unbind = scope.$watch(\n            //         function() {\n            //             return formController.veryDirty;\n            //         }, function(isDirty) {\n            //             if (isDirty) {\n\n            //                 unbind();\n\n            //                 scope.$watch(\n            //                     function() {\n            //                         return formController[scope.field].$error[attrs[\"checkError\"]];\n            //                     }, function(showError) {\n            //                         scope.showError = showError;\n            //                     }\n            //                 );\n            //             }\n            //         }\n            //     );\n            // } else {\n            //     console.warn(\"Can't find field: \" + scope.field);\n            // }\n        }\n    };\n};\n\nfunction veryDirty() {\n    return {\n        restrict: 'A',\n        require: '^form', // Looks on parent also\n        link: function(scope, element, attrs, parentFormCtrl) {\n            parentFormCtrl.veryDirty = false;\n\n            parentFormCtrl.setVeryDirty = function() {\n                parentFormCtrl.veryDirty = true;\n            }\n        }\n    };\n};\n\n//find element with the give id of name and scroll to the first element it finds\nfunction scrollInto(idOrName) {\n    if(!idOrName) {\n        $window.scrollTo(0, 0);\n    }\n\n    //check if an element can be found with id attribute\n    var el = document.getElementById(idOrName);\n    if(!el) {//check if an element can be found with name attribute if there is no such id\n        el = document.getElementsByName(idOrName);\n\n        if(el && el.length) {\n            el = el[0];\n        } else {\n            el = null;\n        }\n    }\n\n    // if an element is found, scroll to the element\n    if(el) {\n        el.scrollIntoView();\n    }\n    //otherwise, ignore\n};\n\nfunction notZero() {\n    return {\n        require: '?ngModel', // get a hold of NgModelController\n        link: function(scope, elm, attrs, ngModelCtrl) {\n\n            function validateZero(myValue) {\n                ngModelCtrl.$setValidity('iszero', !(myValue == 0));\n                return myValue;\n            }\n\n            ngModelCtrl.$parsers.push(validateZero);\n            ngModelCtrl.$formatters.push(validateZero);\n        }\n    }; // return\n};\n\nfunction numberValilidate() {\n    function isNumber(n){\n        var v = parseFloat(n);\n        return v == n;\n    }\n\n    return {\n        require: '?ngModel', // get a hold of NgModelController\n        link: function(scope, elm, attrs, ngModelCtrl) {\n\n            function validateNumber(myValue) {\n                var isValid = isNumber(myValue);\n                ngModelCtrl.$setValidity('number', isValid);\n                if (isValid) {\n                    return parseFloat(myValue);\n                }\n                return myValue;\n            }\n\n            ngModelCtrl.$parsers.push(validateNumber);\n            ngModelCtrl.$formatters.push(validateNumber);\n        }\n    }; // return\n};\n\n\n})();\n","angular.module('angular-dirty-forms').run(['$templateCache', function($templateCache) {\n    $templateCache.put('templates/form-group.html',\n        \"\\n    <div class=\\\"form-group\\\" ng-class=\\\"{&apos;has-error&apos;: isError}\\\">\\n        <label for=\\\"{{for}}\\\" ng-class=\\\"{&apos;col-sm-2&apos;:!isVertical, &apos;control-label&apos;:!isVertical}\\\">{{label}}</label>\\n        <div ng-class=\\\"{&apos;col-sm-10&apos;: !isVertical}\\\" ng-transclude=\\\"\\\"></div>\\n    </div>\\n\");\n    $templateCache.put('templates/control-group.html',\n        \"\\n    <div class=\\\"control-group\\\" ng-class=\\\"{&apos;error&apos;: isError}\\\">\\n        <label class=\\\"control-label\\\" ng-if=\\\"label\\\">{{label}}</label>\\n        <div class=\\\"controls\\\">\\n            <div ng-transclude=\\\"\\\"></div>\\n        </div>\\n    </div>\\n\");\n    $templateCache.put('templates/alerts.html',\n        \"\\n    <div ng-controller=\\\"AlertCtrl\\\" id=\\\"alerts\\\">\\n        <alert ng-repeat=\\\"alert in alerts\\\" type=\\\"{{alert.type}}\\\" close=\\\"closeAlert($index)\\\">\\n            {{alert.msg}}\\n        </alert>\\n    </div>\\n\");\n}]);"],"sourceRoot":"/source/"}